define :ioncontainer_config, :user => nil, :group => nil, :ioncontainer_name => nil, :ioncontainer_spec => nil do
  
  raise ArgumentError, 'user must be specified' if params[:user].nil?
  raise ArgumentError, 'group must be specified' if params[:group].nil?
  raise ArgumentError, 'ioncontainer_name must be specified' if params[:ioncontainer_name].nil?
  raise ArgumentError, 'ioncontainer_spec must be specified' if params[:ioncontainer_spec].nil?
  
  # The following excruciating config work should be a Ruby block somehow
  bash "create rel file preamble" do
    user "#{params[:user]}"
    group "#{params[:group]}"
    code <<-EOH
    echo -e "# Autogenerated\n{\n  'type':'release'," > #{params[:name]}
    echo "  'name':'#{params[:ioncontainer_name]}'," >> #{params[:name]}
    echo "  'version':'0.2'," >> #{params[:name]}
    echo "  'apps':[" >> #{params[:name]}
    chmod 600 #{params[:name]}
    EOH
  end
  
  params[:ioncontainer_spec].each do |app_name, app_config|
    
    one_app = "{'name':'#{app_config[:name]}', "
    one_app << "'version':'#{app_config[:version]}', "
    if app_config.include? :mult and app_config[:mult]
      one_app << "'mult':True, "
    end
    one_app << "'config':{"
    app_config[:config].each do |modname, kvs|
      one_app << "'#{modname}':{ "
      kvs.each do |key, value|
          one_app << "'#{key}':'#{value}', "
      end
      one_app << "}, "
    end
    one_app << "}, 'args':{"
    app_config[:args].each do |key, value|
      one_app << "'#{key}':'#{value}', "
    end
    one_app << "}},"
    
    bash "create app line" do
      user "#{params[:user]}"
      group "#{params[:group]}"
      code <<-EOH
      echo "#{one_app}" >> #{params[:name]}
      chmod 600 #{params[:name]}
      EOH
    end
  end
  
  bash "finish rel file" do
    user "#{params[:user]}"
    group "#{params[:group]}"
    code <<-EOH
    echo -e "  ]\n}\n" >> #{params[:name]}
    EOH
  end
end
